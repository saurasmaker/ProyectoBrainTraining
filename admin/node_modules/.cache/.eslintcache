[{"C:\\Users\\Gines\\my-app\\src\\index.js":"1","C:\\Users\\Gines\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\Gines\\my-app\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":11137,"mtime":1620664708274,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"we8ooq",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Gines\\my-app\\src\\index.js",[],["15","16"],"C:\\Users\\Gines\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\Gines\\my-app\\src\\App.js",["17","18","19","20"],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":3,"column":8,"nodeType":"27","messageId":"28","endLine":3,"endColumn":13},{"ruleId":"29","severity":1,"message":"30","line":151,"column":27,"nodeType":"31","messageId":"32","endLine":151,"endColumn":29},{"ruleId":"25","severity":1,"message":"33","line":172,"column":11,"nodeType":"27","messageId":"28","endLine":172,"endColumn":19},{"ruleId":"34","severity":1,"message":"35","line":196,"column":13,"nodeType":"31","endLine":198,"endColumn":4},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","no-global-assign","no-unsafe-negation"]